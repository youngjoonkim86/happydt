import streamlit as st
from dotenv import load_dotenv
import os
from groq import Groq

# API Key는 보안상 .env로 옮겨도 좋음
load_dotenv()
client = Groq(api_key=os.getenv("GROQ_API_KEY"))

st.set_page_config(page_title="🎯 로또 전문가 GPT", layout="centered")
st.title("💡 로또 번호 추천 by Groq LLM")

prompt = """
        당신은 한국 로또 추천 전문가입니다.

        당신은 다음 회차에 추천할 6개의 번호로 이루어진 조합을 5세트 생성해야 합니다.
        기반 로직은 총 90개의 다양한 조합 로직이며, 통계 기반, 패턴 기반, 필터링, AI, 랜덤 등으로 분류됩니다.
        이 로직들은 조건 변경 및 조합을 통해 300개 이상의 변형 로직으로 확장되어 사용됩니다.

        다음은 당신이 참조해야 할 90개의 기본 로직입니다.  
        단, 이 로직은 분석에만 활용하세요. 출력에는 포함하지 마세요.
        

        [기본 로직 목록]
          1. [통계 기반] 최근 20회차 당첨 번호 출현 빈도
        2. [통계 기반] 가장 오랫동안 출현하지 않은 번호 (미출현수)
        3. [통계 기반] 출현 빈도 상위 10위 번호 조합
        4. [통계 기반] 최근 10회차에서 3번 이상 등장한 번호 포함
        5. [통계 기반] 출현 간격이 일정한 번호 조합
        6. [통계 기반] 출현 간격이 가장 긴 번호 포함
        7. [통계 기반] 이동 평균 출현률 상승 중인 번호 우선 선택
        8. [통계 기반] 번호 총합이 90~170 사이로 조정
        9. [통계 기반] 1~45 번호 중 가장 적게 등장한 10개 번호 조합
        10. [통계 기반] 최근 회차 당첨 번호와 1개 이상 겹치도록 구성
        11. [통계 기반] 각 번호의 누적 출현 수 기준 상위 5개 포함
        12. [통계 기반] 각 번호의 최근 5회 출현 수 기준 상위 3개 포함
        13. [통계 기반] 전체 평균 등장 횟수보다 높은 번호만 사용
        14. [통계 기반] 최근 30회 중 10회 이상 등장한 번호 포함
        15. [통계 기반] 과거 특정 회차와 동일한 번호 재구성
        16. [통계 기반] 지난 5년간 가장 많이 나온 번호 조합
        17. [통계 기반] 홀수 번호 중 출현률 높은 번호 우선
        18. [통계 기반] 짝수 번호 중 출현률 낮은 번호 필터링
        19. [통계 기반] 고번호(23~45) 중 출현률 높은 번호 고정
        20. [통계 기반] 저번호(1~22) 중 출현률 낮은 번호 제외
        21. [패턴 기반] 이월수 포함 조합 생성
        22. [패턴 기반] 연속번호 포함 조합 (예: 11, 12)
        23. [패턴 기반] 끝수 다양화 (끝자리가 겹치지 않도록)
        24. [패턴 기반] 동일 끝수 2개 이상 포함
        25. [패턴 기반] 구간별 균형 조합 (1~15, 16~30, 31~45 각 구간 최소 1개)
        26. [패턴 기반] 10단위 구간별 조합 구성 (1~10, 11~20 등)
        27. [패턴 기반] 홀짝 비율 3:3 고정
        28. [패턴 기반] 홀짝 비율 2:4 적용
        29. [패턴 기반] 홀짝 비율 4:2 적용
        30. [패턴 기반] 고저 비율 3:3 적용
        31. [패턴 기반] 고저 비율 2:4 적용
        32. [패턴 기반] 고저 비율 4:2 적용
        33. [패턴 기반] 끝수가 1, 3, 7 중 하나 이상 포함되도록 구성
        34. [패턴 기반] 끝수 짝수(0,2,4,6,8) 우선 조합
        35. [패턴 기반] 끝수 홀수 우선 조합
        36. [패턴 기반] 연속번호 없는 조합만 생성
        37. [패턴 기반] 중앙값 22~25 범위 유지
        38. [패턴 기반] 번호 간 차이 최소 3 이상 유지
        39. [패턴 기반] 번호 간 차이 최대 10 이하 유지
        40. [패턴 기반] 숫자 간 등차수열 패턴 포함
        41. [필터링 기반] 최근 5회에 등장한 번호 제외
        42. [필터링 기반] 최근 3회에 반복된 번호 제외
        43. [필터링 기반] 전체 상위 5개 번호 제외
        44. [필터링 기반] 전체 하위 5개 번호 제외
        45. [필터링 기반] 미출현 상위 5개 번호 필수 포함
        46. [필터링 기반] 특정 번호 (예: 13, 21, 34) 제외
        47. [필터링 기반] 예상 번호 중 총합이 100 미만 제거
        48. [필터링 기반] 예상 번호 중 총합이 180 이상 제거
        49. [필터링 기반] 특정 구간 번호(예: 40~45) 2개 이하만 포함
        50. [필터링 기반] 특정 번호 조합 반복 방지
        51. [필터링 기반] 전체 회차에서 1번도 등장하지 않은 조합 제거
        52. [필터링 기반] 마지막 번호가 45인 조합 제외
        53. [필터링 기반] 번호 간 거리가 1 이하인 조합 제거
        54. [필터링 기반] 이전 회차 번호 중복 2개 이상 시 제거
        55. [필터링 기반] 끝수 반복되는 조합 제거
        56. [필터링 기반] 이월수 3개 이상 포함 조합 제거
        57. [필터링 기반] 고번호만으로 구성된 조합 제거
        58. [필터링 기반] 저번호만으로 구성된 조합 제거
        59. [필터링 기반] 홀짝 전부 짝수 조합 제거
        60. [필터링 기반] 홀짝 전부 홀수 조합 제거
        61. [AI 기반] XGBoost 예측 확률 상위 번호 조합
        62. [AI 기반] Random Forest 중요도 기반 번호 선택
        63. [AI 기반] Neural Network 출력 확률 기준 조합
        64. [AI 기반] K-평균 클러스터 중심 번호 포함
        65. [AI 기반] PCA 변환 후 가중치 높은 번호 선택
        66. [AI 기반] LSTM 기반 시계열 예측 결과 포함
        67. [AI 기반] AutoML 추천 번호 기반 조합
        68. [AI 기반] Ensemble 모델 다수결 기반 조합
        69. [AI 기반] LightGBM 가중치 기반 번호 선택
        70. [AI 기반] SVM 기반 예측 결과 상위 번호 포함
        71. [랜덤/운세 기반] 완전 무작위 번호 6개 선택
        72. [랜덤/운세 기반] 생년월일 기반 (YYMMDD 변환) 번호 사용
        73. [랜덤/운세 기반] 음양오행 기반 추천 번호
        74. [랜덤/운세 기반] 요일 기반 번호 추천
        75. [랜덤/운세 기반] 별자리 운세 기반 번호 조합
        76. [랜덤/운세 기반] 이름 초성 해시 기반 번호 변환
        77. [랜덤/운세 기반] 전화번호 일부 숫자 포함
        78. [랜덤/운세 기반] 회차 번호의 배수 포함
        79. [랜덤/운세 기반] 회차 번호의 소수 조합 포함
        80. [랜덤/운세 기반] 과거 당첨 회차 번호 해시 기반 선택
        81. [랜덤/운세 기반] 로또 판매점 출현율 높은 지역 기반 번호
        82. [랜덤/운세 기반] 기억에 남는 숫자(사용자 지정) 포함
        83. [랜덤/운세 기반] 유명인의 생일 기반 번호 선택
        84. [랜덤/운세 기반] 중복된 번호 없이 완전 랜덤 구성
        85. [랜덤/운세 기반] 알파벳 해시 기반 숫자 변환 조합
        86. [랜덤/운세 기반] 로또 공 무게 기반 가상 조합
        87. [랜덤/운세 기반] 가상의 복권 AI 추천값 포함
        88. [랜덤/운세 기반] 유저의 최근 선택 번호 반영
        89. [랜덤/운세 기반] 사용자 선택 키워드 기반 추천
        90. [랜덤/운세 기반] 전통적인 행운의 숫자 포함 (7, 3 등)

        출력 형식 예시:
        1번 추천 : 5, 12, 19, 27, 34, 41  
        2번 추천 : 3, 7, 18, 25, 36, 43  
        ...

        ❗설명, 해석, 조건 언급 없이 오직 번호만 5세트 출력하세요.
        방금 생성한 번호 조합에 사용된 로직 3~4개씩만 간단히 설명해줘.
        """

    

# 세션 상태 초기화
if "loading" not in st.session_state:
    st.session_state.loading = False
if "result" not in st.session_state:
    st.session_state.result = ""

# 버튼 클릭 → 로딩 상태로 전환
if st.button("🎲 번호 추천받기", disabled=st.session_state.loading):
    st.session_state.loading = True  # 버튼 비활성화 (딤드 처리)

# 로딩 중이면 LLM 호출 → 완료되면 결과 저장
if st.session_state.loading:
    with st.spinner("AI가 분석 중입니다..."):
        try:
            completion = client.chat.completions.create(
                model="llama3-8b-8192",
                messages=[{"role": "user", "content": prompt}],
                temperature=0.7,
                max_tokens=6000,
                stream=False,
            )
            st.session_state.result = completion.choices[0].message.content
            st.success("추천이 완료되었습니다!")
        except Exception as e:
            st.session_state.result = f"🚨 오류 발생: {str(e)}"
        
        # 로딩 완료 후 버튼 다시 활성화
        st.session_state.loading = False

# 결과 출력
if st.session_state.result:
    st.markdown("### 🧠 GPT 추천 번호")
    st.code(st.session_state.result, language="text")
